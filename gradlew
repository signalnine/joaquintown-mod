#!/bin/sh

#
# Copyright Â© 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   This script expects the JAVA_HOME variable to point to the directory where
#   the JDK is installed. On macOS, this is normally /Library/Java/JavaVirtualMachines/jdk-X.X.X.jdk/Contents/Home
#
#   Important for contributing or modifying:
#
#   This script is generated from the Groovy template
#   https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#   within the Gradle project.
#
#   You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined: we might lose data.
        # We ignore this error as we utilise the fallback below.
        MAX_FD=$( ulimit -n ) 2> /dev/null || :
        if [ $? -eq 0 ] && [ "$MAX_FD" -lt 512 ] ; then
            # In POSIX sh, ulimit -n is undefined: we might lose data.
            # We ignore this error as we utilise the fallback below.
            ( ulimit -n 512 && exec "$JAVACMD" "$@" ) 2> /dev/null || :
        fi
        # In POSIX sh, ulimit -H is undefined: we might lose data.
        # We ignore this error as we utilise the fallback below.
        MAX_FD=$( ulimit -H -n ) 2> /dev/null || :
        # In POSIX sh, ulimit -n is undefined: we might lose data.
        # We ignore this error as we utilise the fallback below.
        ( ulimit -n "$MAX_FD" && exec "$JAVACMD" "$@" ) 2> /dev/null || :
        # Too many open files. We fall back to a fixed value.
        ulimit -n 512
        ;;
      *)
        # In POSIX sh, ulimit -n is undefined: we might lose data.
        # We ignore this error as we utilise the fallback below.
        ( ulimit -n "$MAX_FD" && exec "$JAVACMD" "$@" ) 2> /dev/null || :
        ;;
    esac
fi

# Prepare native libraries path.
if [ "$darwin" ]; then
    # Use the maximum available, or set BORINGSSL_PREFIX to control the folder name.
    # shellcheck disable=SC2034
    NATIVE_PATH=$( cd "$APP_HOME" > /dev/null && find . -name "*native" -type d | grep -E "(macos|darwin)" | xargs printf ":%s" )
else
    # Use the maximum available, or set BORINGSSL_PREFIX to control the folder name.
    # shellcheck disable=SC2034
    NATIVE_PATH=$( cd "$APP_HOME" > /dev/null && find . -name "*native" -type d | grep -v -E "(macos|darwin)" | xargs printf ":%s" )
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS -Xdock:name=Gradle -Xdock:icon=$APP_HOME/media/gradle.icns"
fi

# Shellcheck suggestion to use printf instead of echo -e which is undefined in POSIX
OPTS=""
while [ -n "$1" ] && [ "${1#-*}" != "$1" ]; do
    if [ "$1" = "--" ]; then
        shift
        break
    fi
    OPTS="$OPTS $1"
    shift
done

# Handle the case where $1 is empty, which would make $@ expand to nothing.
# shellcheck disable=SC2086
exec "$JAVACMD" $OPTS \
    -classpath "$CLASSPATH" \
    -Dorg.gradle.appname="$APP_BASE_NAME" \
    $GRADLE_OPTS \
    -Djava.library.path="$NATIVE_PATH" \
    org.gradle.wrapper.GradleWrapperMain \
    "$@"